name: Quick Linter

on:
  pull_request:
    branches: [ master ]

env:
  URL_GDAL_CORE: https://download.gisinternals.com/sdk/downloads/release-1911-x64-gdal-3-0-4-mapserver-7-4-3/gdal-300-1911-x64-core.msi
  URL_GDAL_PYTHON: https://download.gisinternals.com/sdk/downloads/release-1911-x64-gdal-3-0-4-mapserver-7-4-3/GDAL-3.0.4.win-amd64-py3.7.msi


jobs:
  lint-windows:

    runs-on: windows-latest

    steps:
    - name: Get source code
      uses: actions/checkout@v2

    - name: Download GDAL Core for Windows
      uses: carlosperate/download-file-action@v1.0.3
      id: download-gdal-core
      with:
        # URL of the file to download
        file-url: ${{ env.URL_GDAL_CORE }}
        # New filename to rename the downloaded file
        file-name: gdal-core.msi
        location: "."

    - name: Install GDAL Core
      run: ./gdal-core.msi /quiet

    - name: Download GDAL Python bindings for Windows
      uses: carlosperate/download-file-action@v1.0.3
      id: download-gdal-py-bindings
      with:
        # URL of the file to download
        file-url: ${{ env.URL_GDAL_PYTHON }}
        # New filename to rename the downloaded file
        file-name: gdal-python-bindings.msi
        location: "."

    - name: Install GDAL Python Bindings
      run: ./gdal-python-bindings.msi /quiet

    - name: Add GDAL to the path
      run: echo "%ProgramFiles%\GDAL" >> $GITHUB_PATH

    - name: Add GDAL DATA as environment variable
      run: echo "GDAL_DATA=%ProgramFiles%\GDAL\gdal-data" >> $GITHUB_ENV

    - name: Cache pip
      # https://github.com/actions/cache/blob/master/examples.md#python---pip
      uses: actions/cache@v1
      with:
        path: ~\AppData\Local\pip\Cache # This path is specific to Windows
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements/base.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install -r requirements/dev.txt
        # python -m pip install -e .

    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings.
    #     flake8 . --count --exit-zero --statistics
